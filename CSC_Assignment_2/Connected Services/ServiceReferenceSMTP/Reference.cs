//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceSMTP
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://contoso.com/services/", ConfigurationName="ServiceReferenceSMTP.SMTPSoap")]
    internal interface SMTPSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://contoso.com/services/Send", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReferenceSMTP.SendResponse> SendAsync(ServiceReferenceSMTP.SendRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://contoso.com/services/SendGmail", ReplyAction="*")]
        System.Threading.Tasks.Task<ServiceReferenceSMTP.SendGmailResponse> SendGmailAsync(ServiceReferenceSMTP.SendGmailRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    internal partial class SendRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Send", Namespace="http://contoso.com/services/", Order=0)]
        public ServiceReferenceSMTP.SendRequestBody Body;
        
        public SendRequest()
        {
        }
        
        public SendRequest(ServiceReferenceSMTP.SendRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://contoso.com/services/")]
    internal partial class SendRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string msgFrom;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string msgTo;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string msgSubject;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string msgBody;
        
        public SendRequestBody()
        {
        }
        
        public SendRequestBody(string msgFrom, string msgTo, string msgSubject, string msgBody)
        {
            this.msgFrom = msgFrom;
            this.msgTo = msgTo;
            this.msgSubject = msgSubject;
            this.msgBody = msgBody;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    internal partial class SendResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SendResponse", Namespace="http://contoso.com/services/", Order=0)]
        public ServiceReferenceSMTP.SendResponseBody Body;
        
        public SendResponse()
        {
        }
        
        public SendResponse(ServiceReferenceSMTP.SendResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://contoso.com/services/")]
    internal partial class SendResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string SendResult;
        
        public SendResponseBody()
        {
        }
        
        public SendResponseBody(string SendResult)
        {
            this.SendResult = SendResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    internal partial class SendGmailRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SendGmail", Namespace="http://contoso.com/services/", Order=0)]
        public ServiceReferenceSMTP.SendGmailRequestBody Body;
        
        public SendGmailRequest()
        {
        }
        
        public SendGmailRequest(ServiceReferenceSMTP.SendGmailRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://contoso.com/services/")]
    internal partial class SendGmailRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string msgFrom;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string msgTo;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string msgSubject;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string msgBody;
        
        public SendGmailRequestBody()
        {
        }
        
        public SendGmailRequestBody(string msgFrom, string msgTo, string msgSubject, string msgBody)
        {
            this.msgFrom = msgFrom;
            this.msgTo = msgTo;
            this.msgSubject = msgSubject;
            this.msgBody = msgBody;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    internal partial class SendGmailResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SendGmailResponse", Namespace="http://contoso.com/services/", Order=0)]
        public ServiceReferenceSMTP.SendGmailResponseBody Body;
        
        public SendGmailResponse()
        {
        }
        
        public SendGmailResponse(ServiceReferenceSMTP.SendGmailResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://contoso.com/services/")]
    internal partial class SendGmailResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string SendGmailResult;
        
        public SendGmailResponseBody()
        {
        }
        
        public SendGmailResponseBody(string SendGmailResult)
        {
            this.SendGmailResult = SendGmailResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    internal interface SMTPSoapChannel : ServiceReferenceSMTP.SMTPSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    internal partial class SMTPSoapClient : System.ServiceModel.ClientBase<ServiceReferenceSMTP.SMTPSoap>, ServiceReferenceSMTP.SMTPSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SMTPSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(SMTPSoapClient.GetBindingForEndpoint(endpointConfiguration), SMTPSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SMTPSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SMTPSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SMTPSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SMTPSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SMTPSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceSMTP.SendResponse> SendAsync(ServiceReferenceSMTP.SendRequest request)
        {
            return base.Channel.SendAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceSMTP.SendGmailResponse> SendGmailAsync(ServiceReferenceSMTP.SendGmailRequest request)
        {
            return base.Channel.SendGmailAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SMTPSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SMTPSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SMTPSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://smtpcsc.azurewebsites.net/SMTP.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.SMTPSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://smtpcsc.azurewebsites.net/SMTP.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            SMTPSoap,
            
            SMTPSoap12,
        }
    }
}
